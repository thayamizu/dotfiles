(defvar org-export-hatena-notation-subsection "^\\*\\* \\[.*\\]+ \\([^\t\n\r\f]*\\)$")
(defvar org-export-hatena-notation-quote '("[ ]*#\\+BEGIN_QUOTE" ">>" "[ ]*#\\+END_QUOTE" "<<"))
(defvar org-export-hatena-notation-super-pre '("[ ]*#\\+BEGIN_EXAMPLE" ">||" "[ ]*#\\+END_EXAMPLE" "||<"))
(defvar org-export-hatena-notation-src '("[ ]*#\\+BEGIN_SRC" ">||" "[ ]*#\\+END_SRC" "||<"))
(defvar org-export-hatena-notation-subsection "^\*\* \\([^\t\n\r\f]*\\)$")

(defun org-export-hatena-section ()
  (let ((section org-export-hatena-notation-section)
	(subsection org-export-hatena-notation-subsection)
	(subsubsection org-export-hatena-notation-subsubsection))
    (goto-char (point-min))
    (while (re-search-forward subsection nil t)
      (replace-match "*t* \\1"))))

(defun org-export-hatena-begin-to-end (notation)
  (goto-char (point-min))
  (while (re-search-forward (nth 0 notation) nil t)
    (replace-match (nth 1 notation)))
  (goto-char (point-min))
  (while (re-search-forward (nth 2 notation) nil t)
    (replace-match (nth 3 notation))))


(defun org-export-hatena (beg end)
  (interactive "r")
  
  (let ((diary (buffer-substring beg end))
	(quote org-export-hatena-notation-quote)
	(s-pre org-export-hatena-notation-super-pre)
	(src org-export-hatena-notation-src))
    (with-temp-buffer
      (pop-to-buffer (current-buffer))
      (insert diary)
      (org-export-hatena-begin-to-end quote)
      (org-export-hatena-begin-to-end s-pre)
      (org-export-hatena-begin-to-end src)
      (org-export-hatena-section)
      (setq diary (buffer-substring (point-min) (point-max))))
    (simple-hatena simple-hatena-default-id)
    (simple-hatena-mode)
    (goto-char (point-min))
    (newline)
    (insert diary)))